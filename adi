apiVersion: v1
kind: Pod
metadata:
  name: my-pod
spec:
  containers:
    - name: my-container
      image: my-image
      env:
        - name: USERNAME
          valueFrom:
            secretKeyRef:
              name: my-secret
              key: username
        - name: PASSWORD
          valueFrom:
            secretKeyRef:
              name: my-secret
              key: password
--------------------------------------------------------------------------
To access specific secret data as environment variables within a Pod using the SecretKeyRef, you need to define the environment variables in the Pod manifest file. Here's an updated example:
Define the Secret manifest file:

1.Create a Secret manifest file (e.g., secret.yaml) with the desired secret data. For example:
apiVersion: v1
kind: Secret
metadata:
  name: my-secret
data:
  username: <base64-encoded-username>
  password: <base64-encoded-password>
-----------------------------------------------------------
2. Define the Pod manifest file:
apiVersion: v1
kind: Pod
metadata:
  name: my-pod
spec:
  containers:
    - name: my-container
      image: my-image
      env:
        - name: USERNAME
          valueFrom:
            secretKeyRef:
              name: my-secret
              key: username
        - name: PASSWORD
          valueFrom:
            secretKeyRef:
              name: my-secret
              key: password
---------------------------------------------------------------------
3. Apply the Secret and Pod:

Apply the Secret and Pod manifest files to your Kubernetes cluster using the kubectl apply command. For example:
base64-encoded-u
-------------------------------------------------------------------------------------------------------------------
To read data from a ConfigMap in Kubernetes, you can use environment variables or volume mounts within a Pod. Here's how you can achieve this:

1. Define the ConfigMap manifest file:

Create a ConfigMap manifest file (e.g., configmap.yaml) with the desired configuration data. For example:
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-configmap
data:
  key1: value1
  key2: value2
------------------------------------------------
2 . Define the Pod manifest file:

Create a Pod manifest file (e.g., pod.yaml) and specify either environment variables or volume mounts to access the ConfigMap data. Here are examples of both approaches:

Environment Variables:
apiVersion: v1
kind: Pod
metadata:
  name: my-pod
spec:
  containers:
    - name: my-container
      image: my-image
      env:
        - name: KEY1
          valueFrom:
            configMapKeyRef:
              name: my-configmap
              key: key1
        - name: KEY2
          valueFrom:
            configMapKeyRef:
              name: my-configmap
              key: key2
------------------------------------------------------------
Volume Mounts:--->

apiVersion: v1
kind: Pod
metadata:
  name: my-pod
spec:
  containers:
    - name: my-container
      image: my-image
      volumeMounts:
        - name: config-volume
          mountPath: /etc/my-config
          readOnly: true
  volumes:
    - name: config-volume
      configMap:
        name: my-configmap
